/**
 * Validaci√≥n de fechas para pedidos de materiales
 * Regla: Para necesidad el martes, pedido m√°ximo el mi√©rcoles de la semana anterior
 */

export interface ValidacionFecha {
  cumplePlazo: boolean;
  fechaLimite: Date;
  requiereEntregaManual: boolean;
  mensaje?: string;
}

/**
 * Valida si el pedido cumple con el plazo establecido
 * @param fechaNecesidad - Fecha cuando se necesita el material
 * @returns Objeto con el resultado de la validaci√≥n
 */
export function validarPlazoPedido(fechaNecesidad: Date): ValidacionFecha {
  const hoy = new Date();
  hoy.setHours(0, 0, 0, 0); // Normalizar a inicio del d√≠a

  const fechaNecesidadNorm = new Date(fechaNecesidad);
  fechaNecesidadNorm.setHours(0, 0, 0, 0); // Normalizar a inicio del d√≠a

  console.log('üîç INPUT validarPlazoPedido:');
  console.log('fechaNecesidad original:', fechaNecesidad);
  console.log('fechaNecesidad toString:', fechaNecesidad.toString());
  console.log('fechaNecesidad ISO:', fechaNecesidad.toISOString());
  
  // Calcular la fecha l√≠mite: mi√©rcoles de la semana anterior a la fecha de necesidad
  const fechaLimite = new Date(fechaNecesidadNorm);
  
  // Retroceder a la semana anterior (7 d√≠as)
  fechaLimite.setDate(fechaLimite.getDate() - 7);
  
  // Encontrar el mi√©rcoles de esa semana
  const diaSemana = fechaLimite.getDay(); // 0=domingo, 3=mi√©rcoles
  let diasHastaMiercoles;
  
  if (diaSemana <= 3) {
    // Si estamos en lunes, martes o mi√©rcoles, ir al mi√©rcoles de esta semana
    diasHastaMiercoles = 3 - diaSemana;
  } else {
    // Si estamos en jueves, viernes, s√°bado o domingo, ir al mi√©rcoles de la semana siguiente
    diasHastaMiercoles = 7 - diaSemana + 3;
  }
  
  fechaLimite.setDate(fechaLimite.getDate() + diasHastaMiercoles);
  
  // CORREGIDO: Cumple plazo si HOY es antes o igual que la fecha l√≠mite
  const cumplePlazo = hoy <= fechaLimite;
  
  // DEBUG: Log para depuraci√≥n
  console.log('üîç DEBUG validarPlazoPedido:');
  console.log('Hoy:', hoy.toLocaleDateString('ca-ES'));
  console.log('Fecha necesidad:', fechaNecesidadNorm.toLocaleDateString('ca-ES'));
  console.log('Fecha l√≠mite para pedido:', fechaLimite.toLocaleDateString('ca-ES'));
  console.log('¬øCumple plazo?:', cumplePlazo);
  
  let mensaje = '';
  if (!cumplePlazo) {
    const fechaLimiteStr = fechaLimite.toLocaleDateString('ca-ES', { 
      weekday: 'long', 
      day: 'numeric', 
      month: 'long' 
    });
    
    mensaje = `‚ö†Ô∏è Termini de comanda ven√ßut

La sol¬∑licitud es processar√† normalment, per√≤:
‚Ä¢ La data l√≠mit era: ${fechaLimiteStr}
‚Ä¢ Eixos Creativa et contactar√† per coordinar l'entrega manual
‚Ä¢ Recollida abans de la sessi√≥ del ${fechaNecesidadNorm.toLocaleDateString('ca-ES', { 
      weekday: 'long', 
      day: 'numeric', 
      month: 'long' 
    })}

‚úÖ La comanda continua processant-se autom√†ticament`;
  }
  
  return {
    cumplePlazo,
    fechaLimite,
    requiereEntregaManual: !cumplePlazo,
    mensaje: cumplePlazo ? undefined : mensaje
  };
}

/**
 * Formatea una fecha para mostrar en la UI
 */
export function formatearFecha(fecha: Date): string {
  return fecha.toLocaleDateString('ca-ES', { 
    weekday: 'long', 
    day: 'numeric', 
    month: 'long' 
  });
}

/**
 * Funci√≥n de test para validar la l√≥gica (solo para desarrollo)
 */
export function testValidacion() {
  const hoy = new Date();

  console.log('üß™ TESTS DE VALIDACI√ìN:');
  console.log('Hoy es:', formatearFecha(hoy));

  // Test 1: Pedido para ma√±ana (deber√≠a fallar)
  const ma√±ana = new Date();
  ma√±ana.setDate(ma√±ana.getDate() + 1);
  const test1 = validarPlazoPedido(ma√±ana);
  console.log(`üìÖ Test 1 - Necesidad: ${formatearFecha(ma√±ana)} ‚Üí Cumple plazo: ${test1.cumplePlazo}`);
  console.log('üîç Test 1 - Mensaje:', test1.mensaje);

  // Test 2: Pedido para dentro de 2 d√≠as (deber√≠a fallar)
  const enDosDias = new Date();
  enDosDias.setDate(enDosDias.getDate() + 2);
  const test2 = validarPlazoPedido(enDosDias);
  console.log(`üìÖ Test 2 - Necesidad: ${formatearFecha(enDosDias)} ‚Üí Cumple plazo: ${test2.cumplePlazo}`);
  console.log('üîç Test 2 - Mensaje:', test2.mensaje);

  // Test 3: Pedido para la pr√≥xima semana (deber√≠a pasar)
  const proximaSemana = new Date();
  proximaSemana.setDate(proximaSemana.getDate() + 10);
  const test3 = validarPlazoPedido(proximaSemana);
  console.log(`üìÖ Test 3 - Necesidad: ${formatearFecha(proximaSemana)} ‚Üí Cumple plazo: ${test3.cumplePlazo}`);
  console.log('üîç Test 3 - Mensaje:', test3.mensaje);

  // NUEVO: Test espec√≠fico con fecha manual para depurar
  console.log('\nüîß TEST MANUAL - Fecha espec√≠fica:');
  const fechaManual = new Date('2025-09-23'); // Ma√±ana si hoy es 22
  const testManual = validarPlazoPedido(fechaManual);
  console.log(`üìÖ Fecha manual: ${fechaManual.toLocaleDateString('ca-ES')} ‚Üí Cumple plazo: ${testManual.cumplePlazo}`);
  console.log('üîç Mensaje:', testManual.mensaje);

  // Test con la fecha que ha probado el usuario: 25/09/2025
  console.log('\nüéØ TEST USUARIO - 25/09/2025:');
  const fechaUsuario = new Date('2025-09-25');
  const testUsuario = validarPlazoPedido(fechaUsuario);
  console.log(`üìÖ Fecha usuario: ${fechaUsuario.toLocaleDateString('ca-ES')} ‚Üí Cumple plazo: ${testUsuario.cumplePlazo}`);
  console.log('üîç Mensaje:', testUsuario.mensaje);
  console.log('üîç Fecha l√≠mite era:', testUsuario.fechaLimite.toLocaleDateString('ca-ES'));
} 