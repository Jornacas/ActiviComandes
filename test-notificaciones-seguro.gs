/**
 * üß™ TEST SEGURO - Sistema de Notificaciones
 * 
 * Esta funci√≥n prueba SOLO el sistema de notificaciones
 * SIN afectar producci√≥n.
 * 
 * INSTRUCCIONES:
 * 1. Copia este c√≥digo al final de Code.gs en Google Apps Script
 * 2. Ejecuta la funci√≥n testNotificacionesSeguro()
 * 3. Mira los logs para ver si funciona
 * 4. NO afecta nada en producci√≥n
 */

function testNotificacionesSeguro() {
  console.log('üß™ ========================================');
  console.log('üß™ TEST SEGURO - SISTEMA DE NOTIFICACIONES');
  console.log('üß™ ========================================');
  console.log('‚ö†Ô∏è ESTE TEST NO AFECTA PRODUCCI√ìN');
  console.log('');
  
  // Test 1: Verificar que las funciones existen
  console.log('üîç Test 1: Verificar funciones disponibles...');
  
  try {
    // Verificar que getSpaceIdByName existe
    if (typeof getSpaceIdByName === 'function') {
      console.log('‚úÖ Funci√≥n getSpaceIdByName disponible');
    } else {
      console.log('‚ùå Funci√≥n getSpaceIdByName NO disponible');
      return { success: false, error: 'getSpaceIdByName no existe' };
    }
    
    // Verificar que sendChatNotification existe
    if (typeof sendChatNotification === 'function') {
      console.log('‚úÖ Funci√≥n sendChatNotification disponible');
    } else {
      console.log('‚ùå Funci√≥n sendChatNotification NO disponible');
      return { success: false, error: 'sendChatNotification no existe' };
    }
    
  } catch (error) {
    console.log('‚ùå Error verificando funciones:', error);
    return { success: false, error: error.toString() };
  }
  
  console.log('');
  console.log('üîç Test 2: Verificar hoja ChatWebhooks...');
  
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = ss.getSheetByName('ChatWebhooks');
    
    if (!sheet) {
      console.log('‚ùå Hoja ChatWebhooks no existe');
      return { success: false, error: 'Hoja ChatWebhooks no existe' };
    }
    
    const data = sheet.getDataRange().getValues();
    console.log(`‚úÖ Hoja ChatWebhooks encontrada con ${data.length - 1} espacios`);
    
    // Mostrar algunos espacios disponibles
    console.log('üìã Primeros 5 espacios disponibles:');
    for (let i = 1; i < Math.min(6, data.length); i++) {
      const nombre = data[i][0];
      const spaceId = data[i][1];
      console.log(`   ${i}. ${nombre} ‚Üí ${spaceId ? '‚úÖ' : '‚ùå'}`);
    }
    
  } catch (error) {
    console.log('‚ùå Error accediendo a hoja ChatWebhooks:', error);
    return { success: false, error: error.toString() };
  }
  
  console.log('');
  console.log('üîç Test 3: Probar b√∫squeda de espacio...');
  
  try {
    // Buscar un espacio de prueba
    const testSpace = '/LestonnacDX1';
    console.log(`üîé Buscando espacio: ${testSpace}`);
    
    const spaceId = getSpaceIdByName(testSpace);
    
    if (spaceId) {
      console.log(`‚úÖ Space ID encontrado: ${spaceId}`);
    } else {
      console.log(`‚ö†Ô∏è Space ID no encontrado para ${testSpace}`);
      console.log('üí° Esto puede ser normal si el espacio no existe');
    }
    
  } catch (error) {
    console.log('‚ùå Error en b√∫squeda de espacio:', error);
    return { success: false, error: error.toString() };
  }
  
  console.log('');
  console.log('üîç Test 4: Probar env√≠o de notificaci√≥n (SIMULADO)...');
  
  try {
    // Crear mensaje de prueba
    const testMessage = `üß™ **TEST DE NOTIFICACIONES**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ö†Ô∏è ESTE ES UN MENSAJE DE PRUEBA

üìÖ **Fecha:** ${new Date().toLocaleDateString('ca-ES')}
üïê **Hora:** ${new Date().toLocaleTimeString('ca-ES')}
üîß **Tipo:** Test del sistema de notificaciones

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚úÖ Si ves este mensaje, el sistema funciona correctamente`;
    
    console.log('üìù Mensaje de prueba creado');
    console.log('üí° Para probar realmente, ejecuta testNotificacionReal()');
    
  } catch (error) {
    console.log('‚ùå Error creando mensaje de prueba:', error);
    return { success: false, error: error.toString() };
  }
  
  console.log('');
  console.log('üß™ ========================================');
  console.log('üß™ RESUMEN DEL TEST SEGURO');
  console.log('üß™ ========================================');
  console.log('‚úÖ Funciones disponibles: OK');
  console.log('‚úÖ Hoja ChatWebhooks: OK');
  console.log('‚úÖ B√∫squeda de espacios: OK');
  console.log('‚úÖ Mensaje de prueba: OK');
  console.log('');
  console.log('üéâ ¬°TEST SEGURO COMPLETADO!');
  console.log('üí° El sistema de notificaciones est√° listo para probar');
  console.log('‚ö†Ô∏è Para prueba real, ejecuta testNotificacionReal()');
  
  return {
    success: true,
    message: 'Test seguro completado exitosamente',
    functionsAvailable: true,
    chatWebhooksSheet: true,
    spaceSearch: true
  };
}

/**
 * üöÄ TEST REAL - Enviar notificaci√≥n real
 * 
 * ‚ö†Ô∏è ESTE TEST ENV√çA UNA NOTIFICACI√ìN REAL
 * Solo ejecuta si quieres probar con datos reales
 */
function testNotificacionReal() {
  console.log('üöÄ ========================================');
  console.log('üöÄ TEST REAL - ENVIAR NOTIFICACI√ìN');
  console.log('üöÄ ========================================');
  console.log('‚ö†Ô∏è ESTE TEST ENV√çA UNA NOTIFICACI√ìN REAL');
  console.log('');
  
  // Buscar un espacio disponible
  const testSpace = '/LestonnacDX1';
  console.log(`üéØ Enviando notificaci√≥n real a: ${testSpace}`);
  
  const testMessage = `üß™ **TEST REAL DE NOTIFICACIONES**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìÖ **Fecha:** ${new Date().toLocaleDateString('ca-ES')}
üïê **Hora:** ${new Date().toLocaleTimeString('ca-ES')}
üîß **Tipo:** Test real del sistema

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚úÖ Si ves este mensaje en Google Chat, el sistema funciona perfectamente`;
  
  try {
    const result = sendChatNotification(testSpace, testMessage);
    
    console.log('üì§ Resultado del env√≠o:', JSON.stringify(result, null, 2));
    
    if (result.success) {
      console.log('üéâ ¬°NOTIFICACI√ìN ENVIADA EXITOSAMENTE!');
      console.log('üí° Ve a Google Chat y busca el espacio:', testSpace);
    } else {
      console.log('‚ùå Error enviando notificaci√≥n:', result.error);
    }
    
    return result;
    
  } catch (error) {
    console.log('‚ùå Error en test real:', error);
    return { success: false, error: error.toString() };
  }
}
